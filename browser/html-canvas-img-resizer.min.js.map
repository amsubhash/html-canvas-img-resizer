{"version":3,"file":"html-canvas-img-resizer.min.js","mappings":"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","sources":["webpack://htmlCanvasImgResizer/webpack/bootstrap","webpack://htmlCanvasImgResizer/webpack/runtime/define property getters","webpack://htmlCanvasImgResizer/webpack/runtime/hasOwnProperty shorthand","webpack://htmlCanvasImgResizer/webpack/runtime/make namespace object","webpack://htmlCanvasImgResizer/./src/index.ts","webpack://htmlCanvasImgResizer/./src/create-container.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import createContainer from './create-container';\n\n/**\n * Argument for getting the image for specific need\n */\ninterface GetImageArgument {\n  /**\n   * type of image data to return dataURL or blob default if blob\n   */\n  dataType: 'dataURL' | 'blob';\n  /**\n   * return image type jpeg or png format\n   */\n  imageType?: 'image/jpeg' | 'image/png';\n  /**\n   * The image quality of the returned image range from 0-1\n   */\n  imageQuality?: number;\n}\n\ninterface ImageMeta {\n  width: number;\n  height: number;\n  mime?: string;\n}\n\ntype ImageDataType = string | Blob | null;\n\n/**\n * This is the options\n */\ninterface Options {\n  /**\n   * Id of the html div where the cropper will be placed\n   */\n  id: string;\n  /**\n   * Image url or base64 image url\n   * NOTE: If rendered image from other domain exporting from canvas will give error\n   */\n  imageURL?: string;\n  /**\n   * The color of the portion outside the image cropper\n   * default: rgba(0, 0, 0, 0.5)\n   */\n  cropMaskColor?: string;\n  /**\n   * Color of the corner part\n   * default: green\n   */\n  cropCornerColor?: string;\n  /**\n   * Line width of the corner cropper indicator\n   * default 5\n   */\n  cropCornerLineWidth?: number;\n  /**\n   * Sensible sqare portion for resizing at each corner\n   * default: 20\n   */\n  dragCornerBoxSize?: number;\n  /**\n   * The callback (cb) function is to get the image dataURL/blob according to the image type specified in option in realtime\n   * this function will be called every time the resize and other update in the image is called\n   * with the dataURL/blob as a string parameter\n   */\n  cropImageWatcher?: {\n    imgArg?: GetImageArgument;\n    cb?: (imageData: ImageDataType, imageMeta: ImageMeta) => unknown;\n  };\n  /**\n   * default is  1000 if greater than zero this will check for resize of the container after every given duration (millisecond) set by this attribute\n   * set 0 to deactivate\n   * NOTE: if this is set call function stopContainerResizeCheck() from return object otherwise there may be a memory leak\n   */\n  checkForContainerResizeMS?: number;\n}\n\ninterface ReturnType {\n  /**\n   * the callback function (cb) will get the image dataURL/blob of the current status of the image according to the argument provided\n   */\n  getImage: (\n    cb: (imageData: ImageDataType, imageMeta: ImageMeta) => unknown,\n    imgArgs?: GetImageArgument\n  ) => unknown;\n  /**\n   * Dynamically change the image to be cropped\n   */\n  setImageURL: (imageURL: string) => void;\n  /**\n   * If checkForContainerResizeMS is set to a value and this resizer need to be destroyed call this function to avoid memory leak\n   */\n  stopResizeCheck: () => void;\n}\n\n/**\n * This is the main function\n */\nexport default (options: Options): ReturnType => {\n  const dragCornerBoxSize = options.dragCornerBoxSize || 20;\n  const cropImageWatcher = options.cropImageWatcher;\n  const cropMaskColor = options.cropMaskColor || 'rgba(0, 0, 0, 0.5)';\n  const cropCornerColor = options.cropCornerColor || 'green';\n  const cropCornerLineWidth = options.cropCornerLineWidth || 5;\n  const checkForContainerResizeMS =\n    options.checkForContainerResizeMS === undefined\n      ? 1000\n      : options.checkForContainerResizeMS;\n\n  const {\n    imageDiv,\n    exportCanvas,\n    imageCanvas,\n    cropCanvas,\n    selectionDiv,\n    bottomRightCornerDiv,\n    bottomLeftCornerDiv,\n    topLeftCornerDiv,\n    topRightCornerDiv,\n    containerDiv,\n  } = createContainer(options.id, dragCornerBoxSize);\n\n  const imageCanvasCtx = imageCanvas.getContext('2d');\n  if (!imageCanvasCtx) {\n    throw Error('Not able to create canvas');\n  }\n  const cropCanvasCtx = cropCanvas.getContext('2d');\n  if (!cropCanvasCtx) {\n    throw Error('Not able to create canvas');\n  }\n  const exportCanvasCtx = exportCanvas.getContext('2d');\n  if (!exportCanvasCtx) {\n    throw Error('Not able to create canvas');\n  }\n  let drawExportCanvas: () => void;\n  let dragTopLeft = false;\n  let dragBottomLeft = false;\n  let dragTopRight = false;\n  let dragBottomRight = false;\n  let dragBox = false;\n  const image = new Image();\n  let checkResizeFunction: number;\n  if (options.imageURL) image.src = options.imageURL;\n  // image.crossOrigin = 'anonymous';\n\n  const getImageData = async (\n    cb: (data: ImageDataType, imageMeta: ImageMeta) => unknown,\n    args: GetImageArgument = {\n      dataType: 'dataURL',\n      imageType: 'image/jpeg',\n      imageQuality: 1,\n    }\n  ) => {\n    const imageMeta: ImageMeta = {\n      width: exportCanvas.width,\n      height: exportCanvas.height,\n      mime: args.imageType,\n    };\n    if (args.dataType === 'blob') {\n      return exportCanvas.toBlob(\n        (data) => {\n          cb(data, imageMeta);\n        },\n        args.imageType,\n        args.imageQuality\n      );\n    } else {\n      cb(exportCanvas.toDataURL(args.imageType, args.imageQuality), imageMeta);\n    }\n  };\n\n  image.onload = () => {\n    const imgDivWidth = imageDiv.clientWidth;\n    let expectedHeight = image.height * (imgDivWidth / image.width);\n    if (expectedHeight > image.height) {\n      expectedHeight = image.height;\n    }\n    containerDiv.style.height = expectedHeight + 'px';\n    imageCanvas.width = image.width;\n    imageCanvas.height = image.height;\n    cropCanvas.width = imageCanvas.clientWidth;\n    cropCanvas.height = imageCanvas.clientHeight;\n    cropCanvas.addEventListener('mouseup', mouseUp, false);\n    cropCanvas.addEventListener('touchend', mouseUp, false);\n    cropCanvas.addEventListener('mousemove', mouseMove, false);\n    cropCanvas.addEventListener('touchmove', mouseUp, false);\n    imageCanvasCtx.drawImage(image, 0, 0);\n    bottomLeftCornerDiv.addEventListener(\n      'mousedown',\n      () => {\n        dragBottomLeft = true;\n      },\n      false\n    );\n    bottomLeftCornerDiv.addEventListener(\n      'touchstart',\n      () => {\n        dragBottomLeft = true;\n      },\n      false\n    );\n    bottomLeftCornerDiv.addEventListener('mouseup', mouseUp, false);\n    bottomLeftCornerDiv.addEventListener('touchend', mouseUp, false);\n    bottomLeftCornerDiv.addEventListener('mousemove', mouseMove, false);\n    bottomLeftCornerDiv.addEventListener('touchmove', mouseMove, false);\n    topLeftCornerDiv.addEventListener(\n      'mousedown',\n      () => {\n        dragTopLeft = true;\n      },\n      false\n    );\n    topLeftCornerDiv.addEventListener(\n      'touchstart',\n      () => {\n        dragTopLeft = true;\n      },\n      false\n    );\n    topLeftCornerDiv.addEventListener('mouseup', mouseUp, false);\n    topLeftCornerDiv.addEventListener('touchend', mouseUp, false);\n    topLeftCornerDiv.addEventListener('mousemove', mouseMove, false);\n    topLeftCornerDiv.addEventListener('touchmove', mouseMove, false);\n    topRightCornerDiv.addEventListener(\n      'mousedown',\n      () => {\n        dragTopRight = true;\n      },\n      false\n    );\n    topRightCornerDiv.addEventListener(\n      'touchstart',\n      () => {\n        dragTopRight = true;\n      },\n      false\n    );\n    topRightCornerDiv.addEventListener('mouseup', mouseUp, false);\n    topRightCornerDiv.addEventListener('touchend', mouseUp, false);\n    topRightCornerDiv.addEventListener('mousemove', mouseMove, false);\n    topRightCornerDiv.addEventListener('touchmove', mouseMove, false);\n    bottomRightCornerDiv.addEventListener(\n      'mousedown',\n      () => {\n        dragBottomRight = true;\n      },\n      false\n    );\n    bottomRightCornerDiv.addEventListener(\n      'touchstart',\n      () => {\n        dragBottomRight = true;\n      },\n      false\n    );\n    bottomRightCornerDiv.addEventListener('mouseup', mouseUp, false);\n    bottomRightCornerDiv.addEventListener('touchend', mouseUp, false);\n    bottomRightCornerDiv.addEventListener('mousemove', mouseMove, false);\n    bottomRightCornerDiv.addEventListener('touchmove', mouseMove, false);\n    selectionDiv.addEventListener(\n      'mousedown',\n      () => {\n        dragBox = true;\n      },\n      false\n    );\n    selectionDiv.addEventListener(\n      'touchstart',\n      () => {\n        dragBox = true;\n      },\n      false\n    );\n    selectionDiv.addEventListener('mouseup', mouseUp, false);\n    selectionDiv.addEventListener('touchend', mouseUp, false);\n    selectionDiv.addEventListener('mousemove', mouseMove, false);\n    selectionDiv.addEventListener('touchmove', mouseMove, false);\n\n    const selection = {\n      x: 0,\n      y: 0,\n      w: imageCanvas.clientWidth,\n      h: imageCanvas.clientHeight,\n    };\n\n    let preResizeState = {\n      canvasWidth: imageCanvas.clientWidth,\n      canvasHeight: imageCanvas.clientHeight,\n      ...selection,\n    };\n\n    // to avoide memory leak\n    if (checkResizeFunction) {\n      clearInterval(checkResizeFunction);\n    }\n\n    if (checkForContainerResizeMS > 0) {\n      checkResizeFunction = window.setInterval(() => {\n        const newWidth = imageCanvas.offsetWidth;\n        const newHeight = imageCanvas.offsetHeight;\n        if (\n          preResizeState.canvasHeight != newHeight ||\n          preResizeState.canvasWidth != newWidth\n        ) {\n          const xScale =\n            preResizeState.canvasWidth > 0\n              ? newWidth / preResizeState.canvasWidth\n              : 0;\n          const yScale =\n            preResizeState.canvasHeight > 0\n              ? newHeight / preResizeState.canvasHeight\n              : 0;\n\n          preResizeState = {\n            ...selection,\n            canvasHeight: newHeight,\n            canvasWidth: newWidth,\n          };\n          cropCanvas.width = newWidth;\n          cropCanvas.height = newHeight;\n          selection.w = (selection.w > 0 ? selection.w : 1) * xScale;\n          selection.h = (selection.h > 0 ? selection.h : 1) * yScale;\n          draw();\n        }\n      }, checkForContainerResizeMS);\n    }\n\n    drawExportCanvas = async () => {\n      const scaleX = image.width / cropCanvas.width;\n      const scaleY = image.height / cropCanvas.height;\n      const x = selection.x * scaleX;\n      const y = selection.y * scaleY;\n      const width = selection.w * scaleX;\n      const height = selection.h * scaleY;\n      exportCanvas.width = width;\n      exportCanvas.height = height;\n      exportCanvasCtx.drawImage(\n        image,\n        x,\n        y,\n        width,\n        height,\n        0,\n        0,\n        width,\n        height\n      );\n      if (cropImageWatcher && cropImageWatcher.cb) {\n        getImageData(cropImageWatcher.cb, cropImageWatcher.imgArg);\n      }\n    };\n\n    function mouseUp() {\n      dragTopLeft =\n        dragTopRight =\n        dragBottomLeft =\n        dragBottomRight =\n        dragBox =\n          false;\n    }\n\n    let mousePrevX = 0;\n    let mousePrevY = 0;\n    let previousX = 0;\n    let previousY = 0;\n\n    function mouseMove(e: MouseEvent | TouchEvent) {\n      if (!imageDiv) {\n        throw Error('Not able to create canvas');\n      }\n      let canvasRect = cropCanvas.getBoundingClientRect();\n      let mouseX: number = 0;\n      let mouseY: number = 0;\n      if (e instanceof MouseEvent) {\n        mouseX = e.clientX - canvasRect.x;\n        mouseY = e.clientY - canvasRect.y;\n      } else if (e instanceof TouchEvent) {\n        mouseX = e.touches[0].clientX - canvasRect.x;\n        mouseY = e.touches[0].clientY - canvasRect.y;\n      }\n      let isDraw = false;\n      if (dragTopLeft) {\n        selection.w += selection.x - mouseX;\n        selection.h += selection.y - mouseY;\n        selection.x = mouseX;\n        selection.y = mouseY;\n        isDraw = true;\n      } else if (dragTopRight) {\n        selection.w = Math.abs(selection.x - mouseX);\n        selection.h += selection.y - mouseY;\n        selection.y = mouseY;\n        isDraw = true;\n      } else if (dragBottomLeft) {\n        selection.w += selection.x - mouseX;\n        selection.h = Math.abs(selection.y - mouseY);\n        selection.x = mouseX;\n        isDraw = true;\n      } else if (dragBottomRight) {\n        selection.w = Math.abs(selection.x - mouseX);\n        selection.h = Math.abs(selection.y - mouseY);\n        isDraw = true;\n      } else if (dragBox) {\n        selection.x += mouseX - mousePrevX;\n        selection.y += mouseY - mousePrevY;\n        isDraw = true;\n      }\n      if (isDraw) {\n        if (selection.w < 2 * dragCornerBoxSize) {\n          selection.w = 2 * dragCornerBoxSize;\n          selection.x = previousX;\n        }\n        if (selection.h < 2 * dragCornerBoxSize) {\n          selection.h = 2 * dragCornerBoxSize;\n          selection.y = previousY;\n        }\n        if (selection.x < 0) {\n          selection.x = 0;\n        }\n        if (selection.x + selection.w > cropCanvas.width) {\n          selection.x = cropCanvas.width - selection.w;\n        }\n        if (selection.y < 0) {\n          selection.y = 0;\n        }\n        if (selection.y + selection.h > cropCanvas.height) {\n          selection.y = cropCanvas.height - selection.h;\n        }\n        draw();\n      }\n      mousePrevX = mouseX;\n      mousePrevY = mouseY;\n      previousX = selection.x;\n      previousY = selection.y;\n    }\n\n    function draw() {\n      if (!cropCanvasCtx) {\n        throw Error('Not able to create canvas');\n      }\n      cropCanvasCtx.clearRect(0, 0, cropCanvas.width, cropCanvas.height);\n      cropCanvasCtx.fillStyle = cropMaskColor;\n      cropCanvasCtx.strokeStyle = cropCornerColor;\n      cropCanvasCtx.lineWidth = cropCornerLineWidth;\n      cropCanvasCtx.fillRect(0, 0, cropCanvas.width, cropCanvas.height);\n      cropCanvasCtx.clearRect(\n        selection.x,\n        selection.y,\n        selection.w,\n        selection.h\n      );\n      cropCanvasCtx.beginPath();\n      cropCanvasCtx.moveTo(selection.x, selection.y + dragCornerBoxSize);\n      cropCanvasCtx.lineTo(selection.x, selection.y);\n      cropCanvasCtx.lineTo(selection.x + dragCornerBoxSize, selection.y);\n      cropCanvasCtx.moveTo(\n        selection.x + selection.w - dragCornerBoxSize,\n        selection.y\n      );\n      cropCanvasCtx.lineTo(selection.x + selection.w, selection.y);\n      cropCanvasCtx.lineTo(\n        selection.x + selection.w,\n        selection.y + dragCornerBoxSize\n      );\n      cropCanvasCtx.moveTo(\n        selection.x + selection.w,\n        selection.y + selection.h - dragCornerBoxSize\n      );\n      cropCanvasCtx.lineTo(\n        selection.x + selection.w,\n        selection.y + selection.h\n      );\n      cropCanvasCtx.lineTo(\n        selection.x + selection.w - dragCornerBoxSize,\n        selection.y + selection.h\n      );\n      cropCanvasCtx.moveTo(\n        selection.x + dragCornerBoxSize,\n        selection.y + selection.h\n      );\n      cropCanvasCtx.lineTo(selection.x, selection.y + selection.h);\n      cropCanvasCtx.lineTo(\n        selection.x,\n        selection.y + selection.h - dragCornerBoxSize\n      );\n      cropCanvasCtx.stroke();\n      topLeftCornerDiv.style.top = topRightCornerDiv.style.top =\n        selection.y + 'px';\n      topLeftCornerDiv.style.left = bottomLeftCornerDiv.style.left =\n        selection.x + 'px';\n      topRightCornerDiv.style.left = bottomRightCornerDiv.style.left =\n        selection.x + selection.w - dragCornerBoxSize + 'px';\n      bottomLeftCornerDiv.style.top = bottomRightCornerDiv.style.top =\n        selection.y + selection.h - dragCornerBoxSize + 'px';\n      selectionDiv.style.top = selection.y + 'px';\n      selectionDiv.style.left = selection.x + 'px';\n      selectionDiv.style.width = selection.w + 'px';\n      selectionDiv.style.height = selection.h + 'px';\n      drawExportCanvas();\n    }\n\n    draw();\n  };\n\n  return {\n    getImage: async (\n      cb: (imageData: ImageDataType, imageMeta: ImageMeta) => unknown,\n      imgArgs?: GetImageArgument\n    ) => {\n      getImageData(cb, imgArgs);\n    },\n    setImageURL: (imageURL: string) => {\n      image.src = imageURL;\n    },\n    stopResizeCheck: () => {\n      clearInterval(checkResizeFunction);\n    },\n  };\n};\n","export default (containerId: string, dragCornerBoxSize: number) => {\n  const imageDiv = document.getElementById(containerId);\n  if (!imageDiv) {\n    throw Error('Please provide a valid html element Id to work with');\n  }\n  const containerDiv = document.createElement('div');\n  containerDiv.setAttribute(\n    'style',\n    'width:100%; height:100%; position:relative'\n  );\n  imageDiv.appendChild(containerDiv);\n  const imageCanvas = document.createElement('canvas');\n  imageCanvas.setAttribute(\n    'style',\n    'max-width:100%; max-height:100%; position:absolute; top:0; left:0'\n  );\n  const cropCanvas = document.createElement('canvas');\n  cropCanvas.setAttribute(\n    'style',\n    'max-width:100%; max-height:100%; position:absolute; top:0; left:0'\n  );\n  const exportCanvas = document.createElement('canvas');\n  exportCanvas.setAttribute('style', 'display:none');\n\n  // div for click tracker\n  const topLeftCornerDiv = document.createElement('div');\n  const topRightCornerDiv = document.createElement('div');\n  const bottomRightCornerDiv = document.createElement('div');\n  const bottomLeftCornerDiv = document.createElement('div');\n  const selectionDiv = document.createElement('div');\n  bottomLeftCornerDiv.setAttribute(\n    'style',\n    `position: absolute; width: ${dragCornerBoxSize}px; height: ${dragCornerBoxSize}px; top: 0px; left: 0px; cursor: sw-resize; background: transparent; stroke: transparent;`\n  );\n  bottomRightCornerDiv.setAttribute(\n    'style',\n    `position: absolute; width: ${dragCornerBoxSize}px; height: ${dragCornerBoxSize}px; top: 0px; left: 0px; cursor: se-resize; background: transparent; stroke: transparent;`\n  );\n  topRightCornerDiv.setAttribute(\n    'style',\n    `position: absolute; width: ${dragCornerBoxSize}px; height: ${dragCornerBoxSize}px; top: 0px; left: 0px; cursor: ne-resize; background: transparent; stroke: transparent;`\n  );\n  topLeftCornerDiv.setAttribute(\n    'style',\n    `position: absolute; width: ${dragCornerBoxSize}px; height: ${dragCornerBoxSize}px; top: 0px; left: 0px; cursor: nw-resize; background: transparent; stroke: transparent;`\n  );\n  selectionDiv.setAttribute(\n    'style',\n    `position: absolute; width: ${dragCornerBoxSize}px; height: ${dragCornerBoxSize}px; top: 0px; left: 0px; cursor: all-scroll; background: transparent; stroke: transparent;`\n  );\n\n  containerDiv.appendChild(exportCanvas);\n  containerDiv.appendChild(imageCanvas);\n  containerDiv.appendChild(cropCanvas);\n  containerDiv.appendChild(selectionDiv);\n  containerDiv.appendChild(bottomLeftCornerDiv);\n  containerDiv.appendChild(bottomRightCornerDiv);\n  containerDiv.appendChild(topRightCornerDiv);\n  containerDiv.appendChild(topLeftCornerDiv);\n\n  return {\n    exportCanvas,\n    imageCanvas,\n    cropCanvas,\n    selectionDiv,\n    bottomRightCornerDiv,\n    bottomLeftCornerDiv,\n    topLeftCornerDiv,\n    topRightCornerDiv,\n    imageDiv,\n    containerDiv,\n  };\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","options","dragCornerBoxSize","cropImageWatcher","cropMaskColor","cropCornerColor","cropCornerLineWidth","checkForContainerResizeMS","undefined","containerId","imageDiv","document","getElementById","Error","containerDiv","createElement","setAttribute","appendChild","imageCanvas","cropCanvas","exportCanvas","topLeftCornerDiv","topRightCornerDiv","bottomRightCornerDiv","bottomLeftCornerDiv","selectionDiv","id","imageCanvasCtx","getContext","cropCanvasCtx","drawExportCanvas","exportCanvasCtx","checkResizeFunction","dragTopLeft","dragBottomLeft","dragTopRight","dragBottomRight","dragBox","image","Image","imageURL","src","getImageData","cb","args","dataType","imageType","imageQuality","imageMeta","width","height","mime","toBlob","data","toDataURL","onload","imgDivWidth","clientWidth","expectedHeight","style","clientHeight","addEventListener","mouseUp","mouseMove","drawImage","selection","x","y","w","h","preResizeState","canvasWidth","canvasHeight","clearInterval","window","setInterval","newWidth","offsetWidth","newHeight","offsetHeight","xScale","yScale","draw","scaleX","scaleY","imgArg","mousePrevX","mousePrevY","previousX","previousY","e","canvasRect","getBoundingClientRect","mouseX","mouseY","MouseEvent","clientX","clientY","TouchEvent","touches","isDraw","Math","abs","clearRect","fillStyle","strokeStyle","lineWidth","fillRect","beginPath","moveTo","lineTo","stroke","top","left","getImage","imgArgs","setImageURL","stopResizeCheck"],"sourceRoot":""}